version: '3'
services:
  front:
    restart: always
    image: node:19.4.0
    container_name: front
    volumes:
      - ./front/:/app
    working_dir: /app
    command: npm run dev
    environment:
      - CI=true
      - NODE_OPTIONS=--openssl-legacy-provider
      - REACT_APP_API_URL=http://localhost:${PORT}
      - VITE_API_URL=http://localhost:${PORT}
    ports:
      - "5173:5173"
        #    depends_on:
        #     - backend
    networks:
      - frontend
  db:
    image: postgres:12.1
    restart: always
    container_name: db
    volumes:
      - ./database:/var/lib/postgresql/data
    environment: 
      TZ: America/Santiago
      PGTZ: America/Santiago
      POSTGRES_USER: tcero
      POSTGRES_PASSWORD: Waves6_
      POSTGRES_DB: vocabulario
    ports:
      - "5432:5432"
    networks:
      - backend
  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: back
    stdin_open: true
    tty: true
    working_dir: /app
    environment:
      - DB_HOST=$DB_HOST
      - DB_USER=$DB_USER
      - DB_PASSWORD=$DB_PASSWORD
      - DB_NAME=$DB_NAME
      - DB_PORT=$DB_PORT
      - SSLMODE=$SSLMODE
      - TIMEZONE=$TIMEZONE
      - PORT=8000
    volumes:
      - ./backend/:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - frontend
      - backend
  envoy:
    build:
      dockerfile: Dockerfile
      context: envoy
    container_name: envoy
    tty: true
    stdin_open: true
    environment:
     - ENVOY_HOST=0.0.0.0
     - ENVOY_PORT=$PORT
    ports:
      - $PORT:$PORT
    volumes:
      - ./envoy/envoy.yaml:/tmpl/envoy.yaml
    networks:
      - backend
      - frontend
    depends_on:
      - front
      - backend
  languagetool:
    image: elestio/languagetool:${SOFTWARE_VERSION_TAG}
    container_name: lt
    ports:
      - 172.17.0.1:8010:8010
    environment:
      - langtool_languageModel=/ngrams
      - Java_Xms=512m
      - Java_Xmx=1g
    volumes:
      - ./data:/ngrams
  wordnet:
    build:
      context: wordnet
    container_name: wn
    ports:
      - 5000:5000
    volumes:
      - ./wordnet/:/app/
    networks:
      - backend
networks:
  frontend:
  backend:    
